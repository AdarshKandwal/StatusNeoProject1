importpickle
importdatetime
####################################################
#Functiontodisplaythemenu
#displaymainmenu
###################################################
defMenu():
print("========================================================================
=============================================================================
====")
print("========================================================================
=============================================================================
====")
print(" EMPLOYEEEMANAGEMENT
")
print(" SYSTEM
")
print("========================================================================
=============================================================================
====")
print("========================================================================
=============================================================================
====")
print(""*150)
print("********************************************************************************************
*************************************************************")
print(" ~~~~~~~~~~~~~MAINMENU~~~~~~~~~~~
")
print("********************************************************************************************
*************************************************************")
print(""*150)
print("========================================================================
=============================================================================
====")
print(""*150)
print(""*45+"1.InsertEmployeeRecord/Records")
print(""*45+"2.DisplaySortedEmployeeRecordsasperEmpNo")
print(""*45+"3.DisplaySortedEmployeeRecordsasperNames")
print(""*45+"4.DisplaySortedEmployeeRecordsasperDesignation")
print(""*45+"5.DisplayEmployeeRecordsastheDesignation")
print(""*45+"6.DeleteRecord")
print(""*45+"7.UpdateRecord")
print(""*45+"8.SearchRecordDetailsaspertheCustomerName")
print(""*45+"9.Displaygrosssalarybreakup")
print(""*45+"10.Exit")
print(""*150)
print("========================================================================
=============================================================================
====")
print("========================================================================
=============================================================================
====")
####################################################################
########################
#functiontoarrangerecordsasperascendingorderof
#EmployeeNumber
#alphabeticallyorder
####################################################################
#########################
defSortAcc(F):
try:
withopen(F,'rb+')asfil:
rec=pickle.load(fil)
rec.sort(key=lambdarec:rec["ID"])
fil.seek(0)
pickle.dump(rec,fil)
exceptFileNotFoundError:
print(F,"Oops!")
print(F,"Filehasnorecords")
####################################################################
#######
#functiontoarrangerecordsasperascendingorderof
#EmployeeName
#alphabeticallyorder
####################################################################
#######
defSortName(F):
try:
withopen(F,'rb+')asfil:
rec=pickle.load(fil)
rec.sort(key=lambdarec:rec["NAME"])
fil.seek(0)
pickle.dump(rec,fil)
exceptFileNotFoundError:
print(F,"Filehasnorecords")
####################################################################
#######
#functiontoarrangerecordsasperascendingorderof
#Designation
#aphabeticaalyorder
####################################################################
#######
defSortDesig(F):
try:
withopen(F,'rb+')asfil:
rec=pickle.load(fil)
rec.sort(key=lambdarec:rec["Desig"])
fil.seek(0)
pickle.dump(rec,fil)
exceptFileNotFoundError:
print(F,"Filehasnorecords")
defInsert(F):
try:
fil=open(F,'ab+')#willcreatefileifnotexistingelsereadtherecordsfrom theexistingfile.
print(fil.tell())
Des=["MGR","CLK","VP","PRES"]
Dep=["HR","IT","SALES","FIN"]
iffil.tell()>0:
fil.seek(0)
Rec1=pickle.load(fil)
else:
Rec1=[]
whileTrue: #Loopforacceptingrecords
#AllowingonlyuniqueEmployeeIdstobeinserted
#idshouldnotbesame
whileTrue:
Eid=int(input("EnterEmpId"))
ifany(dict.get('ID')==EidfordictinRec1):#checkswhethertheEidisalready
existinginlistofdictionary
print("Employeealreadyexists")
else:
break
Name=input("EnterEmployeeName")
#Allowingonlyvalid10digitMobilenotobeinserted
whileTrue:
Mob=input("EnterMobile")
iflen(Mob)!=10orMob.isdigit()==False:
print("PleaseentervalidMobileNo")
else:
break
####################################################################
#######
#Allowingonlyvalidemailaddresstobeinserted
####################################################################
#######
whileTrue:
Email=input("EnterEmail")
if'@'notinEmailor'.'notinEmail:
print("EnterValidmailaddress")
else:
break
####################################################################
#######
#AllowingonlyspecificDeptIdtobeinserted
####################################################################
#######
whileTrue:
DeptId=input("EnterDeptNameoftheEmployee(HR/IT/SALES/FIN)")
ifDeptId.upper()inDep:
break
####################################################################
#######
#AllowingonlyspecificDesignationtobeinserted
####################################################################
#######
whileTrue:
Desig=input("EntertheDesignation(MGR/CLK/PRES/VP)")
ifDesig.upper()inDes:
break
Sal=float(input("EnterSalary"))
####################################################################
#######
#ThecurrentdateisstoredastheDateofjoiningoftheemployee
####################################################################
#######
Dat=datetime.datetime.now()
Dat=Dat.date()
Rec={"ID":Eid,"NAME":Name.upper(),"Mob":Mob,"Email":Email.upper(),"DeptID":DeptId.upper(),"D
esig":Desig.upper(),"Sal":Sal,"DOJ":Dat}
Rec1.append(Rec)
pickle.dump(Rec,fil)
ch=input("Doyouwanttoentermorerecords")
ifch=='N'orch=='n':
break
fil.close()
withopen(F,'wb')asfil: #willopenthefileforoverwriting
pickle.dump(Rec1,fil)
exceptValueError:
print("Invalidvaluesentered")
####################################################################
#######
#FunctiontoDisplaytherecordsinthe
#BinaryFile
####################################################################
#######
defDisplay(F):
try:
withopen(F,'rb')asfil:
print("="*140)
F="%15s%15s%15s%15s%15s%15s%15s%15s"
print(F%("ID","NAME","MOBILE","EMAILADDRESS","DeptID","Designation","Salary","Date
ofJoining"))
print("="*140)
Rec=pickle.load(fil)
c=len(Rec)
foriinRec:
forjini.values():
print("%15s"%j,end='')
print()
print("*"*140)
print("RecordsRead:",c)
exceptEOFError:
print("="*140)
print("RecordsRead:",c)
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
####################################################################
#######
#FunctiontoDisplaytherecordsonthebasis
#oddDesignation
####################################################################
#######
defDisplayonDesig(F):
try:
withopen(F,'rb')asfil:
Des=["MGR","CLK","VP","PRES"]
print("="*140)
Rec=pickle.load(fil)
whileTrue:
D=input("EntertheDesignation(MGR/CLK/PRES/VP)")
ifD.upper()inDes:
break
c=0
F="%15s%15s%15s%15s%15s%15s%15s%15s"
print(F%("ID","NAME","MOBILE","EMAILADDRESS","DeptID","Designation","Salary","Dateof
Joining"))
print("="*140)
foriinRec:
ifi["Desig"]==D.upper():
c+=1
forjini.values():
print("%15s"%j,end='')
print()
print("*"*140)
print("RecordsRead:",c)
exceptEOFError:
print("="*140)
print("RecordsRead:",c)
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
####################################################################
#######
#Functiontochangethedetailsofa
#customer
####################################################################
#######
defUpdate(F):
try:
withopen(F,'rb+')asfil:
found=-1
Rec=pickle.load(fil)
A=int(input("EntertheEmpIDwhosedetailstobechanged"))
forpinRec:
ifA==p["ID"]:
found=0
fori,jinp.items():
ifi!="DOJ"andi!="ID":
ch=input("Change"+i+"(Y/N)")
ifch=='y'orch=='Y':
p[i]=input("Enter"+i)
p[i]=p[i].upper()
elifi=="Sal":
ch=input("Change"+i+"(Y/N)")
ifch=='y'orch=='Y':
p[i]=float(input("Enter"+i))
break
iffound==-1:
print("Employeedetailsnotfound")
else:
fil.seek(0)
pickle.dump(Rec,fil)
exceptEOFError:
print("RecordnotFound")
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
####################################################################
#######
#FunctiontodeletetheRecordfrom theFile,
#ifitexists
####################################################################
#######
defDelete(F):
try:
withopen(F,'rb+')asfil:
Rec=pickle.load(fil)
ch=int(input("EntertheEmployeeIDtobedeleted"))
foriinrange(0,len(Rec)):
ifRec[i]["ID"]==ch:
print("*"*140)
F="%15s%15s%15s%15s%15s%15s%15s%15s"
print(F%("ID","NAME","MOBILE","EMAIL
ADDRESS","DeptID","Designation","Salary","DateofJoining"))
N=Rec.pop(i)
forjinN.values():
print('%15s'%j,end='')
print()
print("RecordDeleted")
break
else:
print("RecordNotfound")
fil.seek(0)
pickle.dump(Rec,fil)
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
exceptKeyError:
print("RecordNotfound")
exceptIndexError:
print("RecordNotfound")
####################################################################
#######
#FunctiontoSearchfortheRecordfrom theFilewithrespecttothe
#Employeename
####################################################################
########
defSearchName(F):
try:
withopen(F,'rb')asfil:
Rec=pickle.load(fil)
found=0
ch=input("EntertheCustomerNametobesearched")
print("="*140)
F="%15s%15s%15s%15s%15s%15s%15s%15s"
print(F%("ID","NAME","MOBILE","EMAILADDRESS","DeptID","Designation","Salary","Date
ofJoining"))
print("="*140)
foriinRec:
ifi["NAME"]==ch.upper():
found+=1
forjini.values():
print('%15s'%j,end='')
print()
iffound==0:
print("RecordNotfound")
else:
print("Totalrecordsdisplayed:",found)
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
exceptEOFError:
print("Recordnotfound")
####################################################################
#######
#FunctiontoShowthe
#TotalGrossSalary
####################################################################
#######
defTOTSal(F):
try:
withopen(F,'rb')asfil:
Rec=pickle.load(fil)
print("PleaseNotetheGrossSalaryiscalculatedonthebasisofthefollowingcriteria:")
print("1.HRAis30%ofBasicSalary")
print("2.DAis15%ofBasicSalary")
print("3.TAXdeductedis15%of(Basic+HRA+DA)")
print("4.TotalGrossSalaryis:Basic+HRA+DA-Tax")
ch=input("Continue(Y/N)")
ifch=='y'orch=='Y':
F="%15s%15s%15s%15s%15s%15s%15s"
print(F%("ID","NAME","BasicSalary","HRA","DA","TAX","GROSSSALARY"))
foriinRec:
HRA=round(30*i["Sal"]/100,0)
DA=round(15*i["Sal"]/100,0)
TAX=round(((i["Sal"]+HRA+DA)*15/100),0)
GROSS=HRA+DA+i["Sal"]-TAX
print(F%(i["ID"],i["NAME"],i["Sal"],HRA,DA,TAX,GROSS))
else:
print("Goingtothemainmenu")
exceptFileNotFoundError:
print(F,"FileDoesn'texist")
Fi="Employee"
whileTrue:
Menu()
ch=input("EnteryourChoice")
ifch=="1":
Insert(Fi)
elifch=="2":
SortAcc(Fi)
Display(Fi)
elifch=="3":
SortName(Fi)
Display(Fi)
elifch=="4":
SortDesig(Fi)
Display(Fi)
elifch=="5":
DisplayonDesig(Fi)
elifch=="6":
Delete(Fi)
elifch=="7":
Update(Fi)
elifch=="8":
SearchName(Fi)
elifch=="9":
TOTSal(Fi)
elifch=="10":
print("Exiting...")
break
else:
print("Pleasecheck")
print("Youenteredawrongchoice")
print("checkMenuagain")